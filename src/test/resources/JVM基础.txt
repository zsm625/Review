Java虚拟机（针对HotSpot虚拟机）
常见面试题
基本问题
1、介绍下Java内存区域（运行时数据区）
2、Java对象的创建过程（五步 加载->验证->准备->解析->初始化）具体每一步做了什么
3、对象的访问定位的两种方式（句柄和直接指针两种方式）
拓展问题
1、String类和常量池
2、8种基本类型的包装类和常量池

一、运行时数据区域
Java虚拟机在执行Java 程序的过程中会把它管理的内存划分为若干个不同的数据区域，JDK1.8与之前有些不同
详见jvm内存结构图
线程私有的有：
虚拟机栈
程序计数器
本地方法栈
线程共享的：
堆
方法区
直接内存（非运行时数据区的一部分）

1.1程序计数器
程序技术器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。
字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，
分支，循环，跳转，异常处理，线程恢复等功能都需要依赖这个计数器来完成。

另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，
各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。

程序计数器是唯一一个不会出现OutOfMememoryError的内存区域，
它的生命周期随着线程的创建而创建，随着线程的结束而死亡。

1.2Java虚拟机栈
Java虚拟机栈也是线程私有的，它的生命和线程相同，
描述的是Java方法执行的内存模型，每次方法调用的数据都是通过栈传递的。
（Java虚拟机栈是由一个个栈帧组成的，而每个栈帧中都拥有：局部变量表，操作数栈、动态链接、方法出口信息。）

1.3本地方法栈：为虚拟机使用到的Native方法服务
1.4堆
Java虚拟机所管理的内存中最大的一块，Java堆中是所有线程共享的一块内存区域，在虚拟机启动时创建；
这个区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。

Java堆是垃圾收集器管理的主要区域，因此也被称作GC堆，
从垃圾回收的角度，由于现在收集器都采用垃圾收集算法，
所以Java堆还可以细分为新生代和老年代，还进一步划分了eden、from survivor、tosurvivor
进一步划分的目的是为了更好的回收内存，或者更快的分配内存。


1.5方法区
是一个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。

1.6运行时常量池
运行时常量池是方法区的一部分，Class文件中除了与类的版本、字段、方法、接口等描述信息外，
还有常量池，用于存放编译器生成的各种字面量和符合引用）
jdk1.7之前运行时常量池逻辑包含字符串常量池存放在方法区，此时虚拟机对方法区的实现称为永久代；
jdk1.7字符串常量池被从方法区拿到了堆中，运行时常量池剩下的东西还在方法区，也就是永久代；
JDK1.8移除了永久代用元空间代替，这事字符串常量池还在堆上，运行时常量池还在方法区，这时的方法区的实现变成了元空间。


1.7直接内存
直接内存不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁的使用，
而且也可能导致OutOfMemoryError错误的出现。

二、HotSpot虚拟机对象探秘
Java对象创建对象的过程
1、类加载检查