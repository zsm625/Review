2、工厂方法模式（Factory Method Pattern）
 2.1模式定义：
    工厂方法模式又称为工厂模式，属于类创建型模式，在工厂方法模式中，
    工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生产具
    体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，
    即通过工厂子类来确定究竟应该实例化哪一个具体的产品类，比简单工厂模式
    更加符合“开闭原则”。
 2.2模式结构：
    工厂方法模式包含如下角色：
    1、Product：抽象产品
    2、ConcreteProduct：具体产品
    3、Factory：抽象工厂
    4、ConcreteFactory：具体工厂

  2.3 模式分析：
     工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，
     工厂方法模式保持了简单工厂模式的优点，而且克服了他的缺点。在工厂方法模式中，
     核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做，这个
     核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪个产品类被实例化这种细节，
     这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。

  2.4 工厂方法模式的优点：
     1、在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种
     具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无需关心创建
     细节，甚至无需知道具体产品类的类名；
     2、使用工厂方法模式的另一个优点是在系统中加入新产品时，无需修改抽象工厂和抽象产品
     提供的接口，无需修改客户端，也无须修改其他的具体工厂和具体产品，只需要添加一个
     具体工厂和具体产品，符合“开闭原则”。

  2.5 工厂方法模式的缺点：
     1、在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，
     系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，更多类的编译运行，
     会给系统带来额外的开销

  2.6 模式应用：
      JDBC中的工厂方法：
      Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306,
      DatabaseName = DB,user = sa,password = ");
      Statement statement = conn.createStatement();
      ResultSet rs = statement.executeQuery("select * from user");
